// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/signer.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RemoteSignerClient is the client API for RemoteSigner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteSignerClient interface {
	// GetPublicKey returns the public key of the signer
	GetPublicKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPublicKeyResponse, error)
	// SignExtrinsic signs a payload with the signer's private key
	SignExtrinsic(ctx context.Context, in *SignExtrinsicRequest, opts ...grpc.CallOption) (*SignExtrinsicResponse, error)
	// Health returns the health status of the signer
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type remoteSignerClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteSignerClient(cc grpc.ClientConnInterface) RemoteSignerClient {
	return &remoteSignerClient{cc}
}

func (c *remoteSignerClient) GetPublicKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPublicKeyResponse, error) {
	out := new(GetPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/btsigner.v1.RemoteSigner/GetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSignerClient) SignExtrinsic(ctx context.Context, in *SignExtrinsicRequest, opts ...grpc.CallOption) (*SignExtrinsicResponse, error) {
	out := new(SignExtrinsicResponse)
	err := c.cc.Invoke(ctx, "/btsigner.v1.RemoteSigner/SignExtrinsic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSignerClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/btsigner.v1.RemoteSigner/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteSignerServer is the server API for RemoteSigner service.
// All implementations must embed UnimplementedRemoteSignerServer
// for forward compatibility
type RemoteSignerServer interface {
	// GetPublicKey returns the public key of the signer
	GetPublicKey(context.Context, *emptypb.Empty) (*GetPublicKeyResponse, error)
	// SignExtrinsic signs a payload with the signer's private key
	SignExtrinsic(context.Context, *SignExtrinsicRequest) (*SignExtrinsicResponse, error)
	// Health returns the health status of the signer
	Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedRemoteSignerServer()
}

// UnimplementedRemoteSignerServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteSignerServer struct {
}

func (UnimplementedRemoteSignerServer) GetPublicKey(context.Context, *emptypb.Empty) (*GetPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedRemoteSignerServer) SignExtrinsic(context.Context, *SignExtrinsicRequest) (*SignExtrinsicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignExtrinsic not implemented")
}
func (UnimplementedRemoteSignerServer) Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedRemoteSignerServer) mustEmbedUnimplementedRemoteSignerServer() {}

// UnsafeRemoteSignerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteSignerServer will
// result in compilation errors.
type UnsafeRemoteSignerServer interface {
	mustEmbedUnimplementedRemoteSignerServer()
}

func RegisterRemoteSignerServer(s grpc.ServiceRegistrar, srv RemoteSignerServer) {
	s.RegisterService(&RemoteSignerServer_ServiceDesc, srv)
}

var RemoteSignerServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "btsigner.v1.RemoteSigner",
	HandlerType: (*RemoteSignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicKey",
			Handler:    _RemoteSigner_GetPublicKey_Handler,
		},
		{
			MethodName: "SignExtrinsic",
			Handler:    _RemoteSigner_SignExtrinsic_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _RemoteSigner_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/signer.proto",
}

func _RemoteSigner_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btsigner.v1.RemoteSigner/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).GetPublicKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSigner_SignExtrinsic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignExtrinsicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).SignExtrinsic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btsigner.v1.RemoteSigner/SignExtrinsic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).SignExtrinsic(ctx, req.(*SignExtrinsicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSigner_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btsigner.v1.RemoteSigner/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}
