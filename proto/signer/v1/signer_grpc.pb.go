// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/signer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RemoteSigner_GetPublicKey_FullMethodName         = "/btsigner.v1.RemoteSigner/GetPublicKey"
	RemoteSigner_GetPublicKeyByID_FullMethodName     = "/btsigner.v1.RemoteSigner/GetPublicKeyByID"
	RemoteSigner_SignExtrinsic_FullMethodName        = "/btsigner.v1.RemoteSigner/SignExtrinsic"
	RemoteSigner_SignExtrinsicWithKey_FullMethodName = "/btsigner.v1.RemoteSigner/SignExtrinsicWithKey"
	RemoteSigner_ListKeys_FullMethodName             = "/btsigner.v1.RemoteSigner/ListKeys"
	RemoteSigner_Health_FullMethodName               = "/btsigner.v1.RemoteSigner/Health"
)

// RemoteSignerClient is the client API for RemoteSigner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RemoteSigner service definition
type RemoteSignerClient interface {
	// GetPublicKey returns the public key of the default signer
	GetPublicKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPublicKeyResponse, error)
	// GetPublicKeyByID returns the public key of a specific signer by ID
	GetPublicKeyByID(ctx context.Context, in *GetPublicKeyByIDRequest, opts ...grpc.CallOption) (*GetPublicKeyResponse, error)
	// SignExtrinsic signs a payload with the default signer's private key
	SignExtrinsic(ctx context.Context, in *SignExtrinsicRequest, opts ...grpc.CallOption) (*SignExtrinsicResponse, error)
	// SignExtrinsicWithKey signs a payload with a specific signer's private key
	SignExtrinsicWithKey(ctx context.Context, in *SignExtrinsicWithKeyRequest, opts ...grpc.CallOption) (*SignExtrinsicResponse, error)
	// ListKeys returns a list of all available key IDs
	ListKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListKeysResponse, error)
	// Health returns the health status of the signer
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type remoteSignerClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteSignerClient(cc grpc.ClientConnInterface) RemoteSignerClient {
	return &remoteSignerClient{cc}
}

func (c *remoteSignerClient) GetPublicKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPublicKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublicKeyResponse)
	err := c.cc.Invoke(ctx, RemoteSigner_GetPublicKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSignerClient) GetPublicKeyByID(ctx context.Context, in *GetPublicKeyByIDRequest, opts ...grpc.CallOption) (*GetPublicKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublicKeyResponse)
	err := c.cc.Invoke(ctx, RemoteSigner_GetPublicKeyByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSignerClient) SignExtrinsic(ctx context.Context, in *SignExtrinsicRequest, opts ...grpc.CallOption) (*SignExtrinsicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignExtrinsicResponse)
	err := c.cc.Invoke(ctx, RemoteSigner_SignExtrinsic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSignerClient) SignExtrinsicWithKey(ctx context.Context, in *SignExtrinsicWithKeyRequest, opts ...grpc.CallOption) (*SignExtrinsicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignExtrinsicResponse)
	err := c.cc.Invoke(ctx, RemoteSigner_SignExtrinsicWithKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSignerClient) ListKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, RemoteSigner_ListKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSignerClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RemoteSigner_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteSignerServer is the server API for RemoteSigner service.
// All implementations must embed UnimplementedRemoteSignerServer
// for forward compatibility.
//
// RemoteSigner service definition
type RemoteSignerServer interface {
	// GetPublicKey returns the public key of the default signer
	GetPublicKey(context.Context, *emptypb.Empty) (*GetPublicKeyResponse, error)
	// GetPublicKeyByID returns the public key of a specific signer by ID
	GetPublicKeyByID(context.Context, *GetPublicKeyByIDRequest) (*GetPublicKeyResponse, error)
	// SignExtrinsic signs a payload with the default signer's private key
	SignExtrinsic(context.Context, *SignExtrinsicRequest) (*SignExtrinsicResponse, error)
	// SignExtrinsicWithKey signs a payload with a specific signer's private key
	SignExtrinsicWithKey(context.Context, *SignExtrinsicWithKeyRequest) (*SignExtrinsicResponse, error)
	// ListKeys returns a list of all available key IDs
	ListKeys(context.Context, *emptypb.Empty) (*ListKeysResponse, error)
	// Health returns the health status of the signer
	Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedRemoteSignerServer()
}

// UnimplementedRemoteSignerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRemoteSignerServer struct{}

func (UnimplementedRemoteSignerServer) GetPublicKey(context.Context, *emptypb.Empty) (*GetPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedRemoteSignerServer) GetPublicKeyByID(context.Context, *GetPublicKeyByIDRequest) (*GetPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKeyByID not implemented")
}
func (UnimplementedRemoteSignerServer) SignExtrinsic(context.Context, *SignExtrinsicRequest) (*SignExtrinsicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignExtrinsic not implemented")
}
func (UnimplementedRemoteSignerServer) SignExtrinsicWithKey(context.Context, *SignExtrinsicWithKeyRequest) (*SignExtrinsicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignExtrinsicWithKey not implemented")
}
func (UnimplementedRemoteSignerServer) ListKeys(context.Context, *emptypb.Empty) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (UnimplementedRemoteSignerServer) Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedRemoteSignerServer) mustEmbedUnimplementedRemoteSignerServer() {}
func (UnimplementedRemoteSignerServer) testEmbeddedByValue()                      {}

// UnsafeRemoteSignerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteSignerServer will
// result in compilation errors.
type UnsafeRemoteSignerServer interface {
	mustEmbedUnimplementedRemoteSignerServer()
}

func RegisterRemoteSignerServer(s grpc.ServiceRegistrar, srv RemoteSignerServer) {
	// If the following call pancis, it indicates UnimplementedRemoteSignerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RemoteSigner_ServiceDesc, srv)
}

func _RemoteSigner_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteSigner_GetPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).GetPublicKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSigner_GetPublicKeyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).GetPublicKeyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteSigner_GetPublicKeyByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).GetPublicKeyByID(ctx, req.(*GetPublicKeyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSigner_SignExtrinsic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignExtrinsicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).SignExtrinsic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteSigner_SignExtrinsic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).SignExtrinsic(ctx, req.(*SignExtrinsicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSigner_SignExtrinsicWithKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignExtrinsicWithKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).SignExtrinsicWithKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteSigner_SignExtrinsicWithKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).SignExtrinsicWithKey(ctx, req.(*SignExtrinsicWithKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSigner_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteSigner_ListKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).ListKeys(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSigner_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteSigner_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteSigner_ServiceDesc is the grpc.ServiceDesc for RemoteSigner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteSigner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "btsigner.v1.RemoteSigner",
	HandlerType: (*RemoteSignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicKey",
			Handler:    _RemoteSigner_GetPublicKey_Handler,
		},
		{
			MethodName: "GetPublicKeyByID",
			Handler:    _RemoteSigner_GetPublicKeyByID_Handler,
		},
		{
			MethodName: "SignExtrinsic",
			Handler:    _RemoteSigner_SignExtrinsic_Handler,
		},
		{
			MethodName: "SignExtrinsicWithKey",
			Handler:    _RemoteSigner_SignExtrinsicWithKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _RemoteSigner_ListKeys_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _RemoteSigner_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/signer.proto",
}
